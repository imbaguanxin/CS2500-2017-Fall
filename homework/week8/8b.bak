;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname 8b) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)
;;-------------------------------------------------------------------
;; PURPOSE:
;; simiulate pizza
;; function 1 : add post to the server
;; function 2 : receive posts that received from server and display only
;;              the id and posts, numbers are not displayed but not deleted
;; function 3 : search the history, and will highlight characters that are
;;              the same to user's input in green
;; function 4 : when editing, press left or right arrow to move the cursor
;-------------------------------------------------------------------
;; A wordp (word processor) is (make-wordp string string)
;; it is the structure of the word processor
;; it devide the post and search into two parts
;; and I am going to insert an cursor between the two part
(define-struct wordp [l r])
; template:
#;(define (wordp-temp a-wordp)
    (...(wordp-l a-wordp)...
        (wordp-r a-wordp)...))

; A ClientMsg is one of
; - "CATCHUP"                     <<== ask server to send old posts
; - (list "POST" String)          <<== create new post with given text
; - (list "REPLY" Natural String) <<== reply to post with this id, and given text
; INTERPRETATION:
; – Sending the message "CATCHUP" tells the server you would like it
;    to send you all the prior posts the server has received.  You are only
;    allowed to ask the server for catch-up messages once; a second request
;    will result in an error.
; – Sending the message (list "POST" String) – i.e., a two-item
;    list whose first item is the string "POST", and whose second item is a
;    String – indicates you are writing a new post, where the string provides
;    the text of the post
; – Sending the message (list "REPLY" Natural String) indicates that
;    you are replying to an existing post (Note: you cannot reply to a reply).
;    The number indicates the post's id, and the string is the text of the post.

; A ServerMsg is one of:
; - (list "POST" Natural String String)  <<== new post (id, author, content)
; - (list "REPLY" Natural String String) <<== new reply (post id, author, content)
; - (list "ERROR" String)                <<== something went wrong
; INTERPRETATION:
; – Receiving a "POST" message means there is a new post with the given ID#,
;    author, and contents.  This is the same
;    information as you've been receiving via "id:author:contents", except
;    that the data is properly broken apart for you, instead of mashed into
;    one string.
; – Receiving a "REPLY" message there is a new reply containing the ID# of
;    the parent post (that this is a reply to), the author of the reply as 
;    the next string, and whose content is the final string.
; – Receiving an "ERROR" message means the client made a mistake, with the
;    error message given as the string.

; A History is a [List-of Post]
; INTERPRETATION: the history of top-level posts seen so far.
 
; A Post is a (list Number (make-post number string string))
(define-struct post [id author content])
; INTERPRETATION: The ID# of a post, as well as the author and content of a post?
 
; A Reply is a (make-reply number string string)
(define-struct reply [id author content])
; INTERPRETATION: The ID# of the post that this reply is replying to, author and content?

;; A World is one of
;; - EditviewPosts
;; - SearchPosts
;; INTERPRETATION: Represents two different "views" in your program.

(define-struct editview [edit history search])
;; A EditviewPosts is a (make-editview wordp [list of posts/replys] wordp)
;; INTERPRETATION: Means the user is viewing all posts and
;; potentially typing in a new one.
;; examples:
(define edit0 (make-editview (make-wordp "" "")'() (make-wordp "" "")))
(define edit1 (make-editview (make-wordp "editing" "") '() (make-wordp "" "")))
(define edit2
  (make-editview (make-wordp "editing" "") (list (list "POST" 1 "A" "a")
                                                 (list "POST" 2 "B" "b")
                                                 (list "REPLY" 1 "C" "abc"))
                 (make-wordp "a" "")))
(define edit3
  (make-editview (make-wordp "editing" "") '() (make-wordp "a" "")))
;; template:
#;(define (editview-temp ev)
    (...(editview-edit)...
        (history-temp (editview-history))...
        (editview-search)....))

(define-struct searchp [edit history search])
;; A SearchPosts   is a (make-search Edit History Search)
;; INTERPRETATION: Means the user is trying to view only a subset
;; of the existing messages.
;; examples:
(define search0 (make-searchp (make-wordp "" "") '() (make-wordp "" "")))
(define search1 (make-searchp (make-wordp "editing" "") '() (make-wordp "" "")))
(define search2
  (make-searchp (make-wordp "editing" "") (list (list "POST" 1 "A" "a")
                                                 (list "POST" 2 "B" "b")
                                                 (list "REPLY" 1 "C" "abc"))
                (make-wordp "a" "")))
(define search3
  (make-searchp (make-wordp "editing" "") '() (make-wordp "a" "")))
;; template:
#;(define (searchp-temp ev)
    (...(searchp-edit)...
        (history-temp (searchp-history))...
        (searchp-search)....))

;; A History is a List of Strings
;; INTERPRETATION: the prior posts received from the server.
;; examples:
(define h0 '())
(define h1 (list "0:a:a"))
(define h2 (list "0:a:a" "1:b:b" "3:c:c"))
;; template:
#;(define (history-temp h)
    (cond
      [(empty? h) ...]
      [(cons? h) ...(first h)...
                 ...(history-temp (rest h))...]))
  
;-------------------------------------------------------------
;; some constants:
;; Sever:
(define the-server "dictionary.ccs.neu.edu")
;; the port
(define the-port   10001)
;; a previous text window is a empty scene
(define HISTORY (empty-scene 800 800))
;; a editing text window is a smaller empty scene
(define TEXT (empty-scene 800 100))
;; a small rectangle stands for a curosr on the last line
(define CURSOR (rectangle 5 20 "solid" "red"))
;-------------------------------------------------------------
; main function:
(define (simple-net-forum dont-care)
  (big-bang edit0
            [name            "guan.xin:1968"]
            [register        the-server]
            [port            the-port]
            [on-key          keyaction]               ;world key -> editview/searchp/package
            [to-draw         render]                  ;world -> image
            [on-receive      receive-message] ))      ;world -> editview/searchp   
;------------------------------------------------------

;; I need to split the edit and search motion.
;; when on-key, to-draw, on-receive is called
;; I have to go to different brench.
;; examples are in sub-brenches

;; keyaction:
;; PURPOSE: respond to different key
;; editview/searchp key -> editview/searchp
(define (keyaction w ke)
  (cond [(searchp? w) (searchmode w ke)]
        [(editview? w) (editmode w ke)]))

;; render:
;; PURPOSE: draw the UI according to world
;; editview/searchp -> image
(define (render w)
  (cond [(editview? w) (render-edit w)]
        [(searchp? w) (render-search w)]))

;; receive-message
;; PURPOSE: receive message from the server and add it to history
;; editview/searchp string -> editview/searchp
(define (receive-message w m)
  (cond [(editview? w) (receive-edit w m)]
        [(searchp? w) (receive-search w m)]))
;-------------------------------------------------------
;; editview branch:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; render-edit
;; draws how the forum shoud look like
;; it display previous post on the history window
;; and the unposted one on the edit window
;; editview -> image
;; exampls:
(check-expect (render-edit edit0)
              (above HISTORY (overlay/align "left" "top"
                                            (beside (text "" 20 "black") CURSOR)
                                            TEXT)))
(check-expect (render-edit edit1)
              (above HISTORY
                     (overlay/align "left" "top"
                                    (beside (text "editing" 20 "black") CURSOR)
                                    TEXT)))
(check-expect (render-edit edit2)
              (above (overlay/align "left" "top"
                                    (above/align "left"
                                                 (text "a:a" 20 "black")
                                                 (text "b:b" 20 "black")
                                                 (text "c:c" 20 "black"))
                                    HISTORY)
                     (overlay/align "left" "top"
                                    (beside (text "editing" 20 "black") CURSOR)
                                    TEXT)))
(check-expect (render-edit edit3)
              (above HISTORY
                     (overlay/align "left" "top"
                                    (beside (text "editing" 20 "black") CURSOR)
                                    TEXT)))

(define (render-edit ev)
  (above
   ; I wish I have a function to render the history entries
   ; First, I have to process the message: cut the number and ":" and detect errors.
   ; Then, I draw each entry and put them in a list.
   ; Lastly, I overlay the images in the list.
   (overlay/align "left" "top"
                  (arrage-history (editview-history ev))
                  HISTORY)
   ; I wish I have a function to render the editing post
   (render-input (editview-edit ev))))


(define (arrage-history history)
  (local
    ((define (draw-entries e)
       (cond
         [(empty? e) '()]
         [(post? e) (text
                     (string-append "Post"
                                    (post-id e)
                                    ":author:"
                                    (post-author e)
                                    ": "
                                    (post-content e))
                     20 "black")]
         [(reply? e) (text
                      (string-append "Reply to Post"
                                     (reply-id e)
                                     ":author:"
                                     (reply-author e)
                                     ": "
                                     (reply-content e))
                      20 "black")]))
     (define (above-left i1 i2)
       (above/align "left" i1 i2)))
    (foldr above-left empty-image (map draw-entries history))))

;; helper function: render-input
;; wordp -> image
(define (render-input wp)
  (overlay/align "left" "top"
                 (beside
                  (text (wordp-l wp) 20 "black")
                  CURSOR
                  (text (wordp-r wp) 20 "black"))
                 TEXT))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; editmode:
;; editview -> editview / searchp / package
;; it takes in an editview and react according to user's key action
;; examples:

;; 1. enter:
;; it send out editing posts when the post is not empty
;; and clear the currently editing post
(check-expect (editmode edit0 "\r")
              edit0)
(check-expect (editmode edit1 "\r")
              (make-package (make-editview (make-wordp "" "") '() (make-wordp "" ""))
                            "editing"))
(check-expect (editmode edit2 "\r")
              (make-package (make-editview
                             (make-wordp "" "")
                             (list "1:a:a" "2:b:b" "3:c:c")
                             (make-wordp "a" ""))
                            "editing"))
(check-expect (editmode edit3 "\r")
              (make-package (make-editview (make-wordp "" "") '() (make-wordp "a" ""))
                            "editing"))

;; 2. backspace:
;; delete the last character in the left part of the edit part in editview
;; it do nothing when it part is empty
(check-expect (editmode edit0 "\b")
              edit0)
(check-expect (editmode edit1 "\b")
              (make-editview (make-wordp "editin" "") '() (make-wordp "" "")))
(check-expect (editmode edit2 "\b")
              (make-editview (make-wordp "editin" "")
                             (list "1:a:a" "2:b:b" "3:c:c")
                             (make-wordp "a" "")))
(check-expect (editmode edit3 "\b")
              (make-editview (make-wordp "editin" "") '() (make-wordp "a" "")))

;; 3. f2
;; switch to search mode
(check-expect (editmode edit0 "f2")
              (make-searchp (make-wordp "" "")'() (make-wordp "" "")))
(check-expect (editmode edit1 "f2")
              (make-searchp (make-wordp "editing" "") '() (make-wordp "" "")))
(check-expect (editmode edit2 "f2")
              (make-searchp (make-wordp "editing" "")
                            (list "1:a:a" "2:b:b" "3:c:c")
                            (make-wordp "a" "")))
(check-expect (editmode edit3 "f2")
              (make-searchp (make-wordp "editing" "") '() (make-wordp "a" "")))

;; 4. left and right arrow
;; moves the cursor

;; 5. other keys (excluding some of the keys such as menu or shift)
;; add a character to the end of the edit part of editview
(check-expect (editmode edit0 "f")
              (make-editview (make-wordp "f" "")'() (make-wordp "" "")))
(check-expect (editmode edit1 "2")
              (make-editview (make-wordp "editing2" "")'() (make-wordp "" "")))
(check-expect (editmode edit1 "shift")
              (make-editview (make-wordp "editing" "")'() (make-wordp "" "")))

(define (editmode ev ke)
  (cond
    [(string=? ke "\r")
     (cond
       [(string=? "" (append-wordp (editview-edit ev))) ev]
       [(string=? "CATCHUP" (append-wordp (editview-edit ev)))
        (make-package
         (make-editview (make-wordp "" "")
                        (editview-history ev)
                        (editview-search ev))
         "CATCHUP")]
       [else
        (make-package
         (make-editview (make-wordp "" "")
                        (editview-history ev)
                        (editview-search ev))
         (list "POST" (append-wordp (editview-edit ev))))])]
    
    [(string=? ke "\b")
     (make-editview (<=back (editview-edit ev))
                    ; I wish I have a helper function to process the backspace
                    (editview-history ev)
                    (editview-search ev))]
    
    [(string=? ke "f2")
     (make-searchp (editview-edit ev)
                   (editview-history ev)
                   (editview-search ev))]
    
    [(string=? ke "left")
     (make-editview (<-move (editview-edit ev))
                    ; i wish I have a helper function to move the cursor to
                    ; the left
                    (editview-history ev)
                    (editview-search ev))]

    [(string=? ke "right")
     (make-editview (->move (editview-edit ev))
                    ; i wish I have a helper function to move the cursor to
                    ; the right
                    (editview-history ev)
                    (editview-search ev))]
    [(= 1 (string-length ke))
     (make-editview (addch (editview-edit ev) ke)
                    ; I wish I have a helper function to add characters to wordp
                    (editview-history ev)
                    (editview-search ev))]
    
    [else ev]))

))
;=============================================================
;; helper function: <=back
;; wordp -> wordp
;; delete the last character in the left part of wordp
;; examples:
(check-expect (<=back (make-wordp "" "a"))(make-wordp "" "a"))
(check-expect (<=back (make-wordp "kk" "ii")) (make-wordp "k" "ii"))
(define (<=back wp)
  (if (string=? (wordp-l wp) "")
      wp
      (make-wordp
       (substring (wordp-l wp) 0 (- (string-length (wordp-l wp)) 1))
       (wordp-r wp))))

;; helper function: addch
;; wordp string -> wordp
;; add a character to last character in the left part of wrodp
(define (addch wp str)
  (make-wordp
   (string-append (wordp-l wp) str)
   (wordp-r wp)))

;; helper function: <-move
;; wordp -> wordp
;; move the cursor to the left
(define (<-move wp)
  (if (string=? (wordp-l wp) "")
      wp
      (make-wordp (substring (wordp-l wp) 0 (- (string-length (wordp-l wp)) 1))
                  (string-append 
                   (substring (wordp-l wp)
                              (- (string-length (wordp-l wp)) 1)
                              (string-length (wordp-l wp)))
                   (wordp-r wp)))))

;; helper function: ->move
;; wordp -> wordp
;; move the cursor to the right
(define (->move wp)
  (if (string=? (wordp-r wp) "")
      wp
      (make-wordp (string-append (wordp-l wp)(substring (wordp-r wp)0 1))
                  (substring (wordp-r wp) 1 (string-length (wordp-r wp))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; receive-edit
;; editview, ServerMsg -> editview
;; it renew the editview when receive a message from the server
(check-expect (receive-edit edit0 "4:d:d")
              (make-editview (make-wordp "" "") (list "4:d:d") (make-wordp "" "")))
(check-expect (receive-edit edit2 "4:d:d")
              (make-editview (make-wordp "editing" "")
                             (list "1:a:a" "2:b:b" "3:c:c" "4:d:d")
                             (make-wordp "a" "")))

(define (receive-edit ev sm)
  (cond
    [(string=? "POST"(first sm))
     (make-editview (editview-edit ev)
                    (addback sm (editview-history ev))
                    ;I wish I have a helper function to add a post or an error at the end of a list
                    (editview-search ev))]
    [(string=? "ERROR" (first sm))
     (make-editview (editview-edit ev)
                    (addback sm (editview-history ev))
                    (editview-search ev))]))

;; helper function: addback
;; list of post, Post/error -> list of post
;; add a string to the end of the given list of strings
(define (addback x l)
  (cond
    [(empty? l) (cons x '())]
    [(cons? l) (cons (first l) (addback x (rest l)))]))
;-------------------------------------------------------------------
;; searchp brench

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; render-search
;; searchp -> image
;; it shows the search result of given word
;; the results are entries that contain user's input
;; and the same parts in the entries are highlighted in green
(check-expect (render-search search0)
              (above HISTORY (overlay/align "left" "top"
                                            (beside (text "" 20 "black") CURSOR)
                                            TEXT)))
(check-expect (render-search search1)
              (above HISTORY
                     (overlay/align "left" "top"
                                    (beside (text "" 20 "black") CURSOR)
                                    TEXT)))
(check-expect (render-search search2)
              (above (overlay/align "left" "top"
                                    (beside (text "a" 20 "green")
                                            (text ":" 20 "black")
                                            (text "a" 20 "green"))
                                    HISTORY)
                     (overlay/align "left" "top"
                                    (beside (text "a" 20 "black") CURSOR)
                                    TEXT)))
(check-expect (render-search search3)
              (above HISTORY
                     (overlay/align "left" "top"
                                    (beside (text "a" 20 "black") CURSOR)
                                    TEXT)))

(define (render-search sp)
  (above
   (overlay/align "left" "top"
                  (arrange-search-results sp)
                  HISTORY)
   ; i first pick all the entries that should be appeared on screen
   ; then using process-message to wipe the numbers and ":" at the front
   ; then highlight each entry and store them as image in a list
   ; finally I render each entry
   (render-input (searchp-search sp))))

(define (arrange-search-results sp)
  (local
    (define (find-entries en)
      (cond
        [(post? en) (good-post? en)]
        [(reply? en) (good-reply? en)]))
    (define (good-post? post)
      (or (string-contains? (post-id post)(append-wordp sp))
          (string-contains? (post-author post)(append-wordp sp))
          (string-contains? (post-content post)(append-wordp sp))))
    (define (good-reply? reply)
      (or (string-contains? (reply-id reply)(append-wordp sp))
          (string-contains? (reply-author reply)(append-wordp sp))
          (string-contains? (reply-content reply)(append-wordp sp))))
    (arrange-history (filter find-entries (searchp-history)))))

(define (append-wordp x)
  (cond
    [(editview? x) (string-append (wordp-l (editview-edit x)) (wordp-r (editview-edit x)))]
    [(searchp? x) (string-append (wordp-l (searchp-edit x)) (wordp-r (searchp-edit x)))]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; search-mode:
;; search-mode -> editview / searchp
;; it takes in a searchp and react according to user's key action
;; examples:

;; 1. backspace:
;; delete the last character in the search part of searchp
;; it do nothing when the search part is empty
(check-expect (searchmode search0 "\b")
              search0)
(check-expect (searchmode search1 "\b")
              search1)
(check-expect (searchmode search2 "\b")
              (make-searchp
               (make-wordp "editing" "")
               (list "1:a:a" "2:b:b" "3:c:c")
               (make-wordp "" "")))
(check-expect (searchmode search3 "\b")
              (make-searchp (make-wordp"editing" "")
                            '()
                            (make-wordp "" "")))

;; 2. f1
;; switch to search mode
(check-expect (searchmode search0 "f1")
              (make-editview (make-wordp "" "") '() (make-wordp "" "")))
(check-expect (searchmode search1 "f1")
              (make-editview (make-wordp "editing" "")
                             '()
                             (make-wordp "" "")))
(check-expect (searchmode search2 "f1")
              (make-editview (make-wordp "editing" "")
                             (list "1:a:a" "2:b:b" "3:c:c")
                             (make-wordp "a" "")))
(check-expect (searchmode search3 "f1")
              (make-editview (make-wordp "editing" "")
                             '()
                             (make-wordp "a""")))

;; 3. other keys
;; add a character to the end of the edit part of editview
(check-expect (searchmode search0 "f")
              (make-searchp (make-wordp"" "") '() (make-wordp "f" "")))
(check-expect (searchmode search1 "2")
              (make-searchp (make-wordp "editing" "") '() (make-wordp "2" "")))
(define (searchmode sp ke)
  (cond
    [(string=? ke "\b")
     (make-searchp (searchp-edit sp)
                   (searchp-history sp)
                   (<=back(searchp-search sp)))]
    
    [(string=? ke "f1")
     (make-editview (searchp-edit sp)
                    (searchp-history sp)
                    (searchp-search sp))]
    
    [(string=? ke "left")
     (make-searchp (searchp-edit sp)
                   (editview-history sp)
                   (<-move (editview-search sp)))]

    [(string=? ke "right")
     (make-searchp (editview-edit sp)
                   (editview-history sp)
                   (->move (editview-search sp)))]

    [(= (string-length ke) 1)
     (make-searchp (searchp-edit sp)
                   (searchp-history sp)
                   (addch (searchp-search sp) ke))]

    [else (make-searchp (searchp-edit sp)
                        (searchp-history sp)
                        (addch (searchp-search sp) ke))]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; receive-search
;; reveive the message from the server and add it to history
;; searchp, servermsg -> searchp
(check-expect (receive-search search0 "4:d:d")
              (make-searchp (make-wordp "" "") (list "4:d:d") (make-wordp "" "")))
(check-expect (receive-search search2 "4:d:d")
              (make-searchp (make-wordp "editing" "")
                            (list "1:a:a" "2:b:b" "3:c:c" "4:d:d")
                            (make-wordp "a" "")))

(define (receive-search ev sm)
  (cond
    [(string=? (first m) "POST")
     (make-searchp (searchp-edit ev)
                   (addback m (searchp-history ev))
                   (searchp-search ev))]
    [(string=? (first m) "ERROR")
     (make-searchp (searchp-edit ev)
                   (addback m (searchp-history ev))
                   (searchp-search ev))]))